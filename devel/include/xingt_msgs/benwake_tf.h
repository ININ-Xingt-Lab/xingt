// Generated by gencpp from file xingt_msgs/benwake_tf.msg
// DO NOT EDIT!


#ifndef XINGT_MSGS_MESSAGE_BENWAKE_TF_H
#define XINGT_MSGS_MESSAGE_BENWAKE_TF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace xingt_msgs
{
template <class ContainerAllocator>
struct benwake_tf_
{
  typedef benwake_tf_<ContainerAllocator> Type;

  benwake_tf_()
    : header()
    , tf_serial_port()
    , tf_baud_rate(0)
    , tf_dist(0.0)  {
    }
  benwake_tf_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tf_serial_port(_alloc)
    , tf_baud_rate(0)
    , tf_dist(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tf_serial_port_type;
  _tf_serial_port_type tf_serial_port;

   typedef int32_t _tf_baud_rate_type;
  _tf_baud_rate_type tf_baud_rate;

   typedef float _tf_dist_type;
  _tf_dist_type tf_dist;





  typedef boost::shared_ptr< ::xingt_msgs::benwake_tf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xingt_msgs::benwake_tf_<ContainerAllocator> const> ConstPtr;

}; // struct benwake_tf_

typedef ::xingt_msgs::benwake_tf_<std::allocator<void> > benwake_tf;

typedef boost::shared_ptr< ::xingt_msgs::benwake_tf > benwake_tfPtr;
typedef boost::shared_ptr< ::xingt_msgs::benwake_tf const> benwake_tfConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xingt_msgs::benwake_tf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xingt_msgs::benwake_tf_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xingt_msgs::benwake_tf_<ContainerAllocator1> & lhs, const ::xingt_msgs::benwake_tf_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tf_serial_port == rhs.tf_serial_port &&
    lhs.tf_baud_rate == rhs.tf_baud_rate &&
    lhs.tf_dist == rhs.tf_dist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xingt_msgs::benwake_tf_<ContainerAllocator1> & lhs, const ::xingt_msgs::benwake_tf_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xingt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xingt_msgs::benwake_tf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xingt_msgs::benwake_tf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xingt_msgs::benwake_tf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xingt_msgs::benwake_tf_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xingt_msgs::benwake_tf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xingt_msgs::benwake_tf_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xingt_msgs::benwake_tf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2890d06f8c88be21649147a41e1abe4b";
  }

  static const char* value(const ::xingt_msgs::benwake_tf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2890d06f8c88be21ULL;
  static const uint64_t static_value2 = 0x649147a41e1abe4bULL;
};

template<class ContainerAllocator>
struct DataType< ::xingt_msgs::benwake_tf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xingt_msgs/benwake_tf";
  }

  static const char* value(const ::xingt_msgs::benwake_tf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xingt_msgs::benwake_tf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header  header\n"
"string  tf_serial_port\n"
"int32   tf_baud_rate\n"
"float32 tf_dist\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::xingt_msgs::benwake_tf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xingt_msgs::benwake_tf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tf_serial_port);
      stream.next(m.tf_baud_rate);
      stream.next(m.tf_dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct benwake_tf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xingt_msgs::benwake_tf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xingt_msgs::benwake_tf_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tf_serial_port: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tf_serial_port);
    s << indent << "tf_baud_rate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tf_baud_rate);
    s << indent << "tf_dist: ";
    Printer<float>::stream(s, indent + "  ", v.tf_dist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XINGT_MSGS_MESSAGE_BENWAKE_TF_H
