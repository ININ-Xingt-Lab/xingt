// Generated by gencpp from file xingt_msgs/gyroscope.msg
// DO NOT EDIT!


#ifndef XINGT_MSGS_MESSAGE_GYROSCOPE_H
#define XINGT_MSGS_MESSAGE_GYROSCOPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xingt_msgs
{
template <class ContainerAllocator>
struct gyroscope_
{
  typedef gyroscope_<ContainerAllocator> Type;

  gyroscope_()
    {
    }
  gyroscope_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }







  typedef boost::shared_ptr< ::xingt_msgs::gyroscope_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xingt_msgs::gyroscope_<ContainerAllocator> const> ConstPtr;

}; // struct gyroscope_

typedef ::xingt_msgs::gyroscope_<std::allocator<void> > gyroscope;

typedef boost::shared_ptr< ::xingt_msgs::gyroscope > gyroscopePtr;
typedef boost::shared_ptr< ::xingt_msgs::gyroscope const> gyroscopeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xingt_msgs::gyroscope_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xingt_msgs::gyroscope_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace xingt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xingt_msgs::gyroscope_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xingt_msgs::gyroscope_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xingt_msgs::gyroscope_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xingt_msgs::gyroscope_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xingt_msgs::gyroscope_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xingt_msgs::gyroscope_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xingt_msgs::gyroscope_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const ::xingt_msgs::gyroscope_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::xingt_msgs::gyroscope_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xingt_msgs/gyroscope";
  }

  static const char* value(const ::xingt_msgs::gyroscope_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xingt_msgs::gyroscope_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is a message to hold data from an IMU (Inertial Measurement Unit)\n"
"#\n"
"# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n"
"#\n"
"# If the covariance of the measurement is known, it should be filled in (if all you know is the \n"
"# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n"
"# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n"
"# data a covariance will have to be assumed or gotten from some other source\n"
"#\n"
"# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n"
"# estimate), please set element 0 of the associated covariance matrix to -1\n"
"# If you are interpreting this message, please check for a value of -1 in the first element of each \n"
"# covariance matrix, and disregard the associated estimate.\n"
"\n"
"# Header header\n"
"\n"
"# geometry_msgs/Quaternion orientation\n"
"# float64[9] orientation_covariance # Row major about x, y, z axes\n"
"\n"
"# geometry_msgs/Vector3 angular_velocity\n"
"# float64[9] angular_velocity_covariance # Row major about x, y, z axes\n"
"\n"
"# geometry_msgs/Vector3 linear_acceleration\n"
"# float64[9] linear_acceleration_covariance # Row major x, y z \n"
;
  }

  static const char* value(const ::xingt_msgs::gyroscope_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xingt_msgs::gyroscope_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gyroscope_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xingt_msgs::gyroscope_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::xingt_msgs::gyroscope_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // XINGT_MSGS_MESSAGE_GYROSCOPE_H
