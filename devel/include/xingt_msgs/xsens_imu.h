// Generated by gencpp from file xingt_msgs/xsens_imu.msg
// DO NOT EDIT!


#ifndef XINGT_MSGS_MESSAGE_XSENS_IMU_H
#define XINGT_MSGS_MESSAGE_XSENS_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>

namespace xingt_msgs
{
template <class ContainerAllocator>
struct xsens_imu_
{
  typedef xsens_imu_<ContainerAllocator> Type;

  xsens_imu_()
    : header()
    , temperature(0.0)
    , orientation()
    , orientation_covariance()
    , euler_angles()
    , angular_velocity()
    , angular_velocity_covariance()
    , linear_acceleration()
    , linear_acceleration_covariance()
    , free_acceleration()
    , dv()
    , dq()  {
      orientation_covariance.assign(0.0);

      angular_velocity_covariance.assign(0.0);

      linear_acceleration_covariance.assign(0.0);
  }
  xsens_imu_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , temperature(0.0)
    , orientation(_alloc)
    , orientation_covariance()
    , euler_angles(_alloc)
    , angular_velocity(_alloc)
    , angular_velocity_covariance()
    , linear_acceleration(_alloc)
    , linear_acceleration_covariance()
    , free_acceleration(_alloc)
    , dv(_alloc)
    , dq(_alloc)  {
  (void)_alloc;
      orientation_covariance.assign(0.0);

      angular_velocity_covariance.assign(0.0);

      linear_acceleration_covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef boost::array<double, 9>  _orientation_covariance_type;
  _orientation_covariance_type orientation_covariance;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _euler_angles_type;
  _euler_angles_type euler_angles;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef boost::array<double, 9>  _angular_velocity_covariance_type;
  _angular_velocity_covariance_type angular_velocity_covariance;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef boost::array<double, 9>  _linear_acceleration_covariance_type;
  _linear_acceleration_covariance_type linear_acceleration_covariance;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _free_acceleration_type;
  _free_acceleration_type free_acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dv_type;
  _dv_type dv;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _dq_type;
  _dq_type dq;





  typedef boost::shared_ptr< ::xingt_msgs::xsens_imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xingt_msgs::xsens_imu_<ContainerAllocator> const> ConstPtr;

}; // struct xsens_imu_

typedef ::xingt_msgs::xsens_imu_<std::allocator<void> > xsens_imu;

typedef boost::shared_ptr< ::xingt_msgs::xsens_imu > xsens_imuPtr;
typedef boost::shared_ptr< ::xingt_msgs::xsens_imu const> xsens_imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xingt_msgs::xsens_imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xingt_msgs::xsens_imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xingt_msgs::xsens_imu_<ContainerAllocator1> & lhs, const ::xingt_msgs::xsens_imu_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.temperature == rhs.temperature &&
    lhs.orientation == rhs.orientation &&
    lhs.orientation_covariance == rhs.orientation_covariance &&
    lhs.euler_angles == rhs.euler_angles &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.angular_velocity_covariance == rhs.angular_velocity_covariance &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.linear_acceleration_covariance == rhs.linear_acceleration_covariance &&
    lhs.free_acceleration == rhs.free_acceleration &&
    lhs.dv == rhs.dv &&
    lhs.dq == rhs.dq;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xingt_msgs::xsens_imu_<ContainerAllocator1> & lhs, const ::xingt_msgs::xsens_imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xingt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xingt_msgs::xsens_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xingt_msgs::xsens_imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xingt_msgs::xsens_imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xingt_msgs::xsens_imu_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xingt_msgs::xsens_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xingt_msgs::xsens_imu_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xingt_msgs::xsens_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0be8442b6411af5cd0fa95a70e55adf9";
  }

  static const char* value(const ::xingt_msgs::xsens_imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0be8442b6411af5cULL;
  static const uint64_t static_value2 = 0xd0fa95a70e55adf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::xingt_msgs::xsens_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xingt_msgs/xsens_imu";
  }

  static const char* value(const ::xingt_msgs::xsens_imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xingt_msgs::xsens_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is a message to hold data from an IMU (Inertial Measurement Unit)\n"
"#\n"
"# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n"
"#\n"
"# If the covariance of the measurement is known, it should be filled in (if all you know is the \n"
"# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n"
"# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n"
"# data a covariance will have to be assumed or gotten from some other source\n"
"#\n"
"# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n"
"# estimate), please set element 0 of the associated covariance matrix to -1\n"
"# If you are interpreting this message, please check for a value of -1 in the first element of each \n"
"# covariance matrix, and disregard the associated estimate.\n"
"\n"
"Header header\n"
"\n"
"float32 temperature\n"
"\n"
"geometry_msgs/Quaternion orientation\n"
"float64[9] orientation_covariance # 四元数Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 euler_angles # 欧拉角\n"
"\n"
"geometry_msgs/Vector3 angular_velocity\n"
"float64[9] angular_velocity_covariance # 角速度Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"float64[9] linear_acceleration_covariance # 线加速度Row major x, y z \n"
"\n"
"\n"
"geometry_msgs/Vector3 free_acceleration  # 自由线加速度Row major x, y z \n"
"\n"
"geometry_msgs/Vector3 dv  # delta velocity Row major x, y z \n"
"\n"
"\n"
"geometry_msgs/Quaternion dq \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::xingt_msgs::xsens_imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xingt_msgs::xsens_imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.temperature);
      stream.next(m.orientation);
      stream.next(m.orientation_covariance);
      stream.next(m.euler_angles);
      stream.next(m.angular_velocity);
      stream.next(m.angular_velocity_covariance);
      stream.next(m.linear_acceleration);
      stream.next(m.linear_acceleration_covariance);
      stream.next(m.free_acceleration);
      stream.next(m.dv);
      stream.next(m.dq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct xsens_imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xingt_msgs::xsens_imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xingt_msgs::xsens_imu_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "orientation_covariance[]" << std::endl;
    for (size_t i = 0; i < v.orientation_covariance.size(); ++i)
    {
      s << indent << "  orientation_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.orientation_covariance[i]);
    }
    s << indent << "euler_angles: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.euler_angles);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "angular_velocity_covariance[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity_covariance.size(); ++i)
    {
      s << indent << "  angular_velocity_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angular_velocity_covariance[i]);
    }
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "linear_acceleration_covariance[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration_covariance.size(); ++i)
    {
      s << indent << "  linear_acceleration_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.linear_acceleration_covariance[i]);
    }
    s << indent << "free_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.free_acceleration);
    s << indent << "dv: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dv);
    s << indent << "dq: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.dq);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XINGT_MSGS_MESSAGE_XSENS_IMU_H
